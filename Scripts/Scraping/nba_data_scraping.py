# -*- coding: utf-8 -*-
"""NBA_DATA_SCRAPING.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18vh2YIYOFLXOG5hmpaZ8HniuTXgfzhRv
"""

import pandas as pd
import requests
pd.set_option('display.max_columns', None) #see columns in a wide dataframe
import time
import numpy as np

test_url = 'https://stats.nba.com/stats/leagueLeaders?LeagueID=00&PerMode=PerGame&Scope=S&Season=2024-25&SeasonType=Regular%20Season&StatCategory=PTS'

r = requests.get(url=test_url).json()

table_headers = r['resultSet']['headers'] #finds col headers

pd.DataFrame(r['resultSet']['rowSet'], columns=table_headers)

temp_df1 = pd.DataFrame(r['resultSet']['rowSet'], columns=table_headers)
temp_df2 = pd.DataFrame({'Year':['2024-25' for i in range(len(temp_df1))],
                        'Season_type':['Regular%20Season' for i in range(len(temp_df1))]})
temp_df3 = pd.concat([temp_df2, temp_df1], axis=1)
temp_df3

del temp_df1, temp_df2, temp_df3

df_cols = ['Year', 'Season_type'] + table_headers

pd.DataFrame(columns=df_cols)

headers = {
    'Accept': '*/*',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept-Language': 'en-US,en;q=0.9',
    'Connection': 'keep-alive',
    'Host': 'stats.nba.com',
    'Origin': 'https://www.nba.com',
    'Referer': 'https://www.nba.com/',
    'Sec-Ch-Ua': '"Chromium";v="137", "Not)A;Brand";v="24", "Google Chrome";v="137"',
    'Sec-Ch-Ua-Mobile': '?0',
    'Sec-Ch-Ua-Platform': '"macOS"',
    'Sec-Fetch-Dest': 'empty',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'same-site',
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36'
}

df = pd.DataFrame(columns=df_cols)
season_types = ['Regular%20Season', 'Playoffs']

years = ['2020-21', '2021-22', '2022-23', '2023-24', '2024-25']

begin_loop = time.time() #time when we first run cell

for y in years:
    for s in season_types:
      api_url = 'https://stats.nba.com/stats/leagueLeaders?LeagueID=00&PerMode=PerGame&Scope=S&Season='+y+'&SeasonType='+s+'&StatCategory=PTS'
      r = requests.get(url=api_url, headers=headers).json()
      temp_df1 = pd.DataFrame(r['resultSet']['rowSet'], columns=table_headers)
      temp_df2 = pd.DataFrame({'Year':[y for i in range(len(temp_df1))],
                        'Season_type':[s for i in range(len(temp_df1))]})
      temp_df3 = pd.concat([temp_df2, temp_df1], axis=1)
      df = pd.concat([df, temp_df3], axis=0)

      print(f'Finished scraping data for the {y} {s}.')

      lag = np.random.uniform(low=5, high=40)

      print(f'...waiting {round(lag, 1)} seconds')

      time.sleep(lag) #Becasue NBA doesn't like you scraping data

print(f'Process completed! Total run time: {round((time.time()-begin_loop)/60, 2)}')

df.to_excel('nba_player_data.xlsx', index=False)

df